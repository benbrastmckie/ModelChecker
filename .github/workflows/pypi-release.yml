name: PyPI Release

# Only trigger on version tags for major/minor releases
on:
  push:
    tags:
      # Match tags like v1.0.0, v2.1.0 but NOT v1.0.1 (patches)
      - 'v[0-9]+.[0-9]+.0'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.1.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - 'production'
          - 'test-pypi-only'

jobs:
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Get all tags
    
    - name: Check version
      id: check
      run: |
        # Get version from tag or input
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        echo "Version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if it's a major or minor release (patch version is 0)
        if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.0$ ]]; then
          echo "✓ Major/minor release detected: $VERSION"
          echo "should_release=true" >> $GITHUB_OUTPUT
        else
          echo "✗ Patch release detected: $VERSION (skipping PyPI upload)"
          echo "should_release=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Verify version in pyproject.toml matches
        cd Code
        PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        
        if [ "$VERSION" != "$PYPROJECT_VERSION" ]; then
          echo "ERROR: Tag version ($VERSION) doesn't match pyproject.toml ($PYPROJECT_VERSION)"
          exit 1
        fi
        
        echo "✓ Version verified: $VERSION"

  run-tests:
    name: Test on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: validate-version
    if: needs.validate-version.outputs.should_release == 'true'
    
    strategy:
      fail-fast: true  # Stop if any test fails
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.12']  # Test min and max versions
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install and test
      run: |
        cd Code
        pip install --upgrade pip
        pip install build
        python -m build
        pip install dist/*.whl
        python -c "import model_checker; print(f'Version: {model_checker.__version__}')"
        python -m model_checker --help

  build-and-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-version, run-tests]
    if: needs.validate-version.outputs.should_release == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        cd Code
        rm -rf dist/  # Clean any old builds
        python -m build
        ls -la dist/
        twine check dist/*
    
    - name: Upload to Test PyPI
      if: github.event.inputs.release_type != 'production' || github.event_name == 'push'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        if [ -n "$TWINE_PASSWORD" ]; then
          cd Code
          twine upload --repository testpypi dist/* --skip-existing
          echo "✓ Uploaded to Test PyPI"
          echo "Test with: pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ model-checker"
        else
          echo "⚠ TEST_PYPI_API_TOKEN not set, skipping Test PyPI"
        fi
    
    - name: Upload to Production PyPI
      if: (github.event_name == 'push' || github.event.inputs.release_type == 'production')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        if [ -n "$TWINE_PASSWORD" ]; then
          cd Code
          twine upload dist/*
          echo "✓ Published to PyPI!"
          echo "Install with: pip install model-checker==${{ needs.validate-version.outputs.version }}"
        else
          echo "ERROR: PYPI_API_TOKEN not set! Cannot publish to PyPI."
          echo "Please set up the secret in repository settings."
          exit 1
        fi
    
    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-version.outputs.version }}
        release_name: Release v${{ needs.validate-version.outputs.version }}
        body: |
          ## ModelChecker v${{ needs.validate-version.outputs.version }}
          
          ### Installation
          ```bash
          pip install model-checker==${{ needs.validate-version.outputs.version }}
          ```
          
          ### What's Changed
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false